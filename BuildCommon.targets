<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!--
		Defining custom Targets to execute before project compilation starts.
	-->
	<PropertyGroup>
		<CompileDependsOn>
			CommonBuildDefineModifiedAssemblyVersion;
			$(CompileDependsOn);
		</CompileDependsOn>
	</PropertyGroup>
	
	<!--
		Creates modified version of AssemblyInfo.cs, replaces [AssemblyVersion] attribute with the one specifying actual build version (from MSBuild properties), and includes that file instead of the original AssemblyInfo.cs in the compilation.
		Instead of hardcoding to AssemblyInfo.cs the actual file which will hold the [AssemblyVersion] attributes is specified with VersionAssemblyFile (does not include extensions).
	-->
	<Target Name="CommonBuildDefineModifiedAssemblyVersion" Condition="'$(VersionAssembly)' != '' And '(VersionAssemblyFile)' != ''">
		<!-- Find $(VersionAssemblyFile) in the "Compile" Items. Remove it from "Compile" Items because we will use a modified version instead. -->
		<ItemGroup>
			<OriginalAssemblyInfo Include="@(Compile)" Condition="%(Filename) == '$(VersionAssemblyFile)' And (%(Extension) == '.cs')" />
			<Compile Remove="**/$(VersionAssemblyFile).cs" />
		</ItemGroup>
		<!-- Copy the original $(VersionAssemblyFile).cs to obj\ folder, i.e. $(IntermediateOutputPath). The copied filepath is saved into @(ModifiedAssemblyInfo) Item. -->
		<Copy SourceFiles="@(OriginalAssemblyInfo)"
			  DestinationFiles="@(OriginalAssemblyInfo->'$(IntermediateOutputPath)%(Identity)')">
			<Output TaskParameter="DestinationFiles" ItemName="ModifiedAssemblyInfo"/>
		</Copy>
		<!-- Replace the version bit (in AssemblyVersion and AssemblyFileVersion attributes) using regular expression. Use the defined property: $(VersionAssembly). -->
		<Message Text="Setting AssemblyVersion to $(VersionAssembly)" />
		<RegexUpdateFile Files="@(ModifiedAssemblyInfo)"
					Regex="AssemblyVersion\(&quot;(\d+)\.(\d+)(\.(\d+)\.(\d+)|.*)&quot;\)"
					ReplacementText="AssemblyVersion(&quot;$(VersionAssembly)&quot;)"
					/>
		<!-- Include the modified $(VersionAssemblyFile).cs file in "Compile" items (instead of the original). -->
		<ItemGroup>
			<Compile Include="@(ModifiedAssemblyInfo)" />
		</ItemGroup>
	</Target>
	
	<!--
		Necessary for MSBuild changes.
	-->
	<PropertyGroup Condition=" '$(MSBuildToolsVersion)' &lt; '14.0' ">
		<BuildTaskPath>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</BuildTaskPath>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(MSBuildToolsVersion)' &gt;= '14.0' ">
		<BuildTaskPath>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</BuildTaskPath>
	</PropertyGroup>
	
	<UsingTask TaskName="RegexUpdateFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(BuildTaskPath)">
		<ParameterGroup>
			<Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
			<Regex ParameterType="System.String" Required="true" />
			<ReplacementText ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.Core" />
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Using Namespace="Microsoft.Build.Framework" />
			<Using Namespace="Microsoft.Build.Utilities" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				try {
					var rx = new System.Text.RegularExpressions.Regex(this.Regex);
					for (int i = 0; i < Files.Length; ++i)
					{
						var path = Files[i].GetMetadata("FullPath");
						if (!File.Exists(path)) continue;

						var txt = File.ReadAllText(path);
						txt = rx.Replace(txt, this.ReplacementText);
						File.WriteAllText(path, txt);
					}
					return true;
				}
				catch (Exception ex) {
					Log.LogErrorFromException(ex);
					return false;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>